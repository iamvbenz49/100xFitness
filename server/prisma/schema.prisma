generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(uuid()) 
  email         String            @unique
  name          String
  passwordHash  String
  targetWeight  Float?
  currentWeight Float?
  Goal          String?
  isVirgin      Boolean           @default(true)
  workouts      Workout[]
  weightLogs    WeightLog[]
  nutrition     NutritionLog[]
  exercises     WorkoutExercise[]
  createdAt     DateTime          @default(now())
}

model Workout {
  id        String              @id @default(uuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  exercises WorkoutToExercise[]
  createdAt DateTime            @default(now())

  @@unique([name, userId])
}

model WorkoutExercise {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String

  workouts WorkoutToExercise[]
  SetLog   SetLog[]

  @@unique([name, userId])
}

// NEW Join Table (Workout â‡† WorkoutExercise)
model WorkoutToExercise {
  id         String          @id @default(uuid())
  workoutId  String
  exerciseId String
  workout    Workout         @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId]) 
}

// SetLog (Exercise Sets)
model SetLog {
  id         String          @id @default(uuid())
  exerciseId String
  exercise   WorkoutExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  reps       Int
  weight     Float
}

// WeightLog
model WeightLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight    Float
  createdAt DateTime @default(now())
}

// NutritionLog
model NutritionLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  calories  Int
  protein   Float
  carbs     Float
  fats      Float
  createdAt DateTime @default(now())
}
